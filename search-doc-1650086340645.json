[{"title":"Introduction","type":0,"sectionRef":"#","url":"","content":"","keywords":""},{"title":"Container Management​","type":1,"pageTitle":"Introduction","url":"#container-management","content":"Rancher Desktop provides the ability to build, push, and pull container images along with the ability to run containers. This is provided by either the Docker CLI (when you choose Moby/dockerd as you engine) or nerdctl (when you choose containerd as your engine). nerdctl is a &quot;Docker-compatible CLI for containerd&quot; provided by the containerd project. "},{"title":"Kubernetes​","type":1,"pageTitle":"Introduction","url":"#kubernetes","content":"Kubernetes is built in to Rancher Desktop. Kubernetes is provided by k3s, a lightweight certified distribution. With Rancher Desktop you have the ability to choose your version of Kubernetes and reset Kubernetes or Kubernetes and the whole container runtime with the click of a button. "},{"title":"Rancher vs Rancher Desktop​","type":1,"pageTitle":"Introduction","url":"#rancher-vs-rancher-desktop","content":"While Rancher and Rancher Desktop share the Rancher name they do different things. Rancher Desktop is not Rancher on the Desktop. Rancher is a powerful solution to manage Kubernetes clusters. Rancher Desktop provides a local Kubernetes and container management platform. The two solutions complement each other. If you want to run Rancher on your local system, you can install Rancher into Rancher Desktop. "},{"title":"FAQ","type":0,"sectionRef":"#","url":"faq","content":"FAQ This FAQ is a work in progress designed to answer the questions our users most frequently ask about Rancher Desktop. Q: Is Rancher Desktop a desktop version of Rancher?​ A: While Rancher and Rancher Desktop share the Rancher name, they do different things. Rancher Desktop is not Rancher on the Desktop. Rancher is a powerful solution to manage Kubernetes clusters. Rancher Desktop runs local Kubernetes and a container management platform. The two solutions complement each other. Q: Can I open Cluster Manager in Rancher Desktop?​ A: No, the Cluster Manager feature is currently a Rancher-only concept. We are working on an early integration of the Rancher Dashboard in an upcoming release and will notify the community when this becomes available. To learn more about Rancher Desktop, click here. To learn more about Rancher, click here. Q: Can I have Docker Desktop installed alongside Rancher Desktop?​ A: Yes, but they cannot be run at the same time as both Rancher Desktop and Docker Desktop use the same Docker socket (/var/run/docker.sock). Before starting one, be sure to stop the other first. Q: How can I perform a clean uninstall of Rancher Desktop?​ A: First, perform a Factory Reset, and then you will uninstall the app. The uninstall process varies based on the operating system. For more information, please refer here. Q: What support, if any, is available for DNS over VPN on Windows?​ A: Support is now available for tunneling only. Currently, no support is available for split-DNS. Q: What does the &quot;WSL Integration&quot; tab do?​ A: This makes the Kubernetes configuration accessible in the displayed WSL distributions so that you can use commands such as kubectl to communicate with Kubernetes. Q: Where can I find detailed logs?​ A: Click on the Troubleshooting tab, then click on Show Logs. Q: How can I enable the dashboard for the Traefik ingress controller?​ A: The Traefik dashboard is not exposed by default, for security reasons. However, it is possible to expose the dashboard in multiple ways. For instance, using port-forward will enable dashboard access: kubectl port-forward -n kube-system $(kubectl -n kube-system get pods --selector &quot;app.kubernetes.io/name=traefik&quot; --output=name) 9000:9000 Copy Visit http://127.0.0.1:9000/dashboard/ in your browser to view the Traefik dashboard. Q: How can I disable Traefik, and will doing so remove Traefik resources?​ A: Yes, you can disable Traefik in order to free up port 80 and 443 for alternate ingress configuration. Disabling Traefik will not delete existing resources. By default, the Enable Traefik feature is selected under Kubernetes Settings; uncheck this box to disable it. If you want to delete Traefik resources, click on Reset Kubernetes on the Kubernetes Settings panel of the UI. Q: Is there support for internal container port forwarding?​ A: Yes, support has been enabled again for this feature on Linux and macOS. Q: Does file sharing work similarly to Docker Desktop? Do I have to do any additional configuration to mount volumes to VMs?​ A: Currently, the following directories are shared by default: /Users/$USER on macOS, /home/$USER on Linux, and /tmp/rancher-desktop on both. For Windows, all files are automatically shared via WSL2. Q: I do not see an entry for Rancher Desktop when running kubectl config get-contexts, where is it?​ A: Rancher Desktop places its configuration in the default location, ~/.kube/config, and uses that. Your KUBECONFIG environment variable may be set to look elsewhere for configuration files. Q: Can containers reach back to host services via host.docker.internal?​ A: Yes. Q: Rancher Desktop is stuck on Waiting for Kubernetes API, what do I do?​ A: The cause is hard to determine without additional information. Navigate to the Troubleshooting tab and use the button to access the logs. Then go to the Rancher Desktop GitHub page and file an issue with the logs attached. Q: I can no longer run docker compose after installing Rancher Desktop and uninstalling Docker Desktop, what happened?​ A: The docker compose subcommand is bundled as part of a Docker Desktop installation and is removed when uninstalled. Future versions of Rancher Desktop will include and automatically docker compose for you, but until then you can install it using this procedure: For MacOS: $ cd /tmp $ mkdir dc-work $ cd dc-work $ curl -o docker-compose -kL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-darwin-x86_64 $ chmod +x docker-compose $ mkdir -p ~/.docker/cli-plugins/ $ mv docker-compose ~/.docker/cli-plugins/ $ cd .. $ rmdir dc-work Copy For Linux, and in a Linux subsystem on Windows: $ cd /tmp $ mkdir dc-work $ cd dc-work $ curl -o docker-compose -kL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 $ chmod +x docker-compose $ mkdir -p ~/.docker/cli-plugins/ $ mv docker-compose ~/.docker/cli-plugins/ $ cd .. $ rmdir dc-work Copy For Windows, in a powershell session: $ cd $Env:TEMP # (or $Env:TMP) $ mkdir dc-work $ cd dc-work $ iwr -UseBasicParsing -OutFile docker-compose.exe https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-windows-x86_64.exe $ mkdir $ENV:HOMEPATH/.docker/cli-plugins -Force $ mv docker-compose.exe $ENV:HOMEPATH/.docker/cli-plugins/ $ cd .. $ rmdir dc-work Copy Also, on Windows, don't forget to also set up docker-compose on the Linux side as well, described above. Q: I don't need the Kubernetes cluster deployed by Rancher Desktop; how do I disable it to save resources?​ A: Kubernetes can be disabled to run just containerd or dockerd by itself for reduced resource consumption. By default, the Enable Kubernetes feature is selected under Kubernetes Settings; uncheck this box to disable it. Q: What's happening to the Kubernetes Image Manager (kim)?​ A: As of version 1.0 Kim is no longer shipped and has been replaced by nerdctl and the Docker CLI. Q: I'm using Homebrew to install Rancher Desktop, but brew install rancher-desktop is failing, why?​ A: Due to the Homebrew cask naming conventions, the -desktop suffix is dropped from the cask formula name. Use brew install rancher instead. Q: Running brew install rancher is failing with a It seems there is already a Binary at '/usr/local/bin/&lt;BINARY&gt;' error, why?​ A: If any of the Rancher Desktop supporting utilities (Helm, kubectl, nerdctl, docker) are already managed by Homebrew, then the installation fails due to how the Homebrew cask formula is defined. Installing using the Mac app will avoid this issue. Q: The tools on the Support Utilities page are not installed and I see a Insufficient permission to manipulate /usr/local/bin error, how do I fix it?​ A: This occurs when you do not have ownership of /usr/local/bin. A long-term solution to improve the handling of permissions is in the works. In the meantime, a temporary workaround is to change ownership of /usr/local/bin by running sudo chown $USER /usr/local/bin. When you are able to write to the directory, Rancher Desktop is able to create the symlinks. Q: Is Cygwin compatible with Rancher Desktop?​ A: No, but there are plans to add compatibility. Q: How do I fix permission denied errors when trying to use Docker on WSL?​ A: You need write-permission to access the docker socket. There are many ways to go about that, but this is one of the more common approaches. Using the Ubuntu WSL command-line: sudo groupadd docker sudo adduser $USER docker sudo chown root:docker /var/run/docker.sock sudo chmod g+w /var/run/docker.sock newgrp docker Copy Q: How do I fix kubectl: command not found issue on Linux?​ A: By default, Rancher Desktop creates symlinks of kubectl, docker, helm and nerdctl binaries in the /home/&lt;user&gt;/.local/bin directory on Linux. To be able to call these commands directly from the console you may add the directory to your PATH environment variable by executing the following command in console and performing logout and login: echo &quot;export PATH=\\$PATH:/home/$(whoami)/.local/bin&quot; &gt;&gt; ~/.bashrc Copy","keywords":""},{"title":"Features","type":0,"sectionRef":"#","url":"getting-started/features","content":"","keywords":""},{"title":"General​","type":1,"pageTitle":"Features","url":"getting-started/features#general","content":"The General tab, provides general information about the project's status as well as links to discuss the project, report issues, or to learn more about the project. "},{"title":"Check for updates automatically​","type":1,"pageTitle":"Features","url":"getting-started/features#check-for-updates-automatically","content":"When an update is available, users are provided a notification and the release notes for the upgrade target. This happens whether automatic updates are enabled or not. If this option is enabled, the update is downloaded and then installed the next time Rancher Desktop is started. "},{"title":"Allow collection of anonymous statistics to help us improve Rancher Desktop​","type":1,"pageTitle":"Features","url":"getting-started/features#allow-collection-of-anonymous-statistics-to-help-us-improve-rancher-desktop","content":"This option allows Rancher Desktop to collect information on how you interact with the Rancher Desktop application. Information such as what workloads you run are not collected. "},{"title":"Kubernetes Settings​","type":1,"pageTitle":"Features","url":"getting-started/features#kubernetes-settings","content":"On the Kubernetes Settings tab, you can manage the settings of your virtual machine. "},{"title":"Kubernetes Version​","type":1,"pageTitle":"Features","url":"getting-started/features#kubernetes-version","content":"This option presents a list of Kubernetes versions that your Rancher Desktop instance can use. When upgrading: A check is performed to see if the target Kubernetes version is available locally. If not, it downloads the files.Workloads are retained.Images are retained. When downgrading: Workloads are removed.Images are retained. To switch versions: Click the Kubernetes version drop-down menu.Select the version you want to change to.On the confirmation window, click OK to proceed. "},{"title":"Enable Kubernetes​","type":1,"pageTitle":"Features","url":"getting-started/features#enable-kubernetes","content":"This option allows you to enable or disable Kubernetes. By disabling Kubernetes, you can run just containerd or dockerd by itself for reduced resource consumption. By default, Kubernetes is enabled. To enable/disable Kubernetes, just check/uncheck the Enable Kubernetes checkbox. The app would be restarted when you enable/disable Kubernetes. Disabling Kubernetes will not delete existing resources and they will be available again when you enable Kubernetes back. "},{"title":"Enable Traefik​","type":1,"pageTitle":"Features","url":"getting-started/features#enable-traefik","content":"This option allows you to enable or disable Traefik. By disabling Traefik, you can free up port 80 and 443 for alternate ingress configuration. By default, Traefik is enabled. To enable/disable Traefik, just check/uncheck the Enable Traefik checkbox. The app needs to be manually restarted when you enable/disable Traefik. This behavior will be changed in an upcoming release, where a prompt will let you restart the app. Disabling Traefik will not delete existing resources. "},{"title":"Container Runtime​","type":1,"pageTitle":"Features","url":"getting-started/features#container-runtime","content":"Set the container runtime for Rancher Desktop. Users have the option of containerd which provides namespaces for containers and the use of nerdctl or dockerd (moby) which enables the Docker API and the use of the Docker CLI. Only one container runtime will function at a time. When switching to a different container runtime: A restart of Kubernetes is required.Workloads and images that have been built or pulled using the existing container runtime are not available on the container runtime being switched to. "},{"title":"Memory (macOS & Linux)​","type":1,"pageTitle":"Features","url":"getting-started/features#memory-macos--linux","content":"The amount of memory to allocate to Rancher Desktop. The selectable range is based on your system. The red area within the range indicates an allocation that may affect system services. This option is not available for Rancher Desktop on Windows. With WSL, memory allocation is configured globally across all Linux distributions. Refer to the WSL documentation for instructions. "},{"title":"CPUs (macOS & Linux)​","type":1,"pageTitle":"Features","url":"getting-started/features#cpus-macos--linux","content":"The number of CPUs to allocate to Rancher Desktop. The selectable range is based on your system. The red area within the range indicates an allocation that may affect system services. This option is not available for Rancher Desktop on Windows. With WSL, CPU allocation is configured globally across all Linux distributions. Refer to the WSL documentation for instructions. "},{"title":"Port​","type":1,"pageTitle":"Features","url":"getting-started/features#port","content":"Set the port Kubernetes is exposed on. Use this setting to avoid port collisions if multiple instances of K3s are running. "},{"title":"Reset Kubernetes/Reset Kubernetes and Container Images​","type":1,"pageTitle":"Features","url":"getting-started/features#reset-kubernetesreset-kubernetes-and-container-images","content":"This option removes all workloads and Kubernetes configurations. Images that have been pulled are not removed when a reset occurs. On the confirmation window, click OK to proceed. At this point, Kubernetes is stopped then workloads and configurations are removed. Kubernetes is then be started again. "},{"title":"Working with Kubernetes Clusters​","type":1,"pageTitle":"Features","url":"getting-started/features#working-with-kubernetes-clusters","content":"Launching a Kubernetes cluster: Launch Rancher Desktop app. Click on Kubernetes Settings, and then select your desired Kubernetes version. Choose either containerd or dockerd for your container runtime.  Note the progress bar at the bottom-left of the app indicating Kubernetes download progress and API setup. Once that bar has completed initializing, your cluster is fully up.  Stopping a Kubernetes cluster: You may stop the Kubernetes cluster by quitting Rancher Desktop. You can close Rancher Desktop by right-clicking on tray icon at the bottom of the screen, or by selecting File &gt; Exit. Resetting a Kubernetes cluster: Refer here to learn about resetting the Kubernetes cluster. Note that resetting will delete all workloads and configuration.  "},{"title":"WSL Integration (Windows)​","type":1,"pageTitle":"Features","url":"getting-started/features#wsl-integration-windows","content":"The WSL Integration tab gives the option to make the Rancher Desktop Kubernetes configuration accessible to any Linux distributions configured for WSL. Once enabled, you can use communicate with the Rancher Desktop Kubernetes cluster using tools like kubectl from within the WSL distribution. "},{"title":"Port Forwarding (Windows)​","type":1,"pageTitle":"Features","url":"getting-started/features#port-forwarding-windows","content":"To forward a port: Find the service and click Forward. A random port is assigned.Optional: click Cancel to remove the port assigned. "},{"title":"Supporting Utilities (macOS & Linux)​","type":1,"pageTitle":"Features","url":"getting-started/features#supporting-utilities-macos--linux","content":"On the Supporting Utilities tab, you can create symbolic links to tools in /usr/local/bin. By default, a symbolic link is created if the tool is not already linked. Symbolic links can be created (or removed) for the following tools, which are installed as part of Rancher Desktop: helmkubectlnerdctldocker "},{"title":"Images​","type":1,"pageTitle":"Features","url":"getting-started/features#images","content":"The Images tab, allows you to manage the images on your virtual machine. To manage your images using nerdctl instead, refer to the Images section. "},{"title":"Scanning Images​","type":1,"pageTitle":"Features","url":"getting-started/features#scanning-images","content":"This feature uses Trivy to scan your images for vulnerabilities and configuration issues. To scan an image: From the image list, find the image you want to scan.Click ⋮ &gt; Scan.Review the results then click Close Output to Continue. "},{"title":"Adding Images​","type":1,"pageTitle":"Features","url":"getting-started/features#adding-images","content":"Pulling Images​ Use this option to pull images from a registry to your virtual machine. To pull an image: Click the + button in the top-right corner.Click on the Pull tab.Enter the name of the image to pull. Note: By default, images are pulled from Docker Hub in which use the repo/image[:tag] format. To pull from other registries, include the hostname registry.example.com/repo/image[:tag]. Click Pull. Building Images​ Use this option to build an image and add it to your virtual machine. To build an image: Click the + button in the top-right corner.Click on the Build tab.Enter a name for the image being built. E.g., repo/image, repo/image:tag, registry.example.com/repo/image, or registry.example.com/repo/image:tag.Click Build.In the file browser, select the Dockerfile to build an image with. "},{"title":"Troubleshooting Tips​","type":1,"pageTitle":"Features","url":"getting-started/features#troubleshooting-tips","content":""},{"title":"Show Logs​","type":1,"pageTitle":"Features","url":"getting-started/features#show-logs","content":"Use this option to open the folder containing all Rancher Desktop log files. "},{"title":"Factory Reset​","type":1,"pageTitle":"Features","url":"getting-started/features#factory-reset","content":"Remove the cluster and all other Rancher Desktop settings. The initial setup procedure must be done again. To perform a factory reset: Click Reset.On the confirmation window, click OK to proceed. Kubernetes stops and Rancher Desktop closes.Start Rancher Desktop again. "},{"title":"Installation","type":0,"sectionRef":"#","url":"getting-started/installation","content":"","keywords":""},{"title":"macOS​","type":1,"pageTitle":"Installation","url":"getting-started/installation#macos","content":""},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"getting-started/installation#requirements","content":"Rancher Desktop requires the following on macOS: macOS Catalina 10.15 or higher.Apple Silicon (M1) or Intel CPU with VT-x.Persistent internet connection. It is also recommended to have: 8 GB of memory4 CPU Additional resources may be required depending on the workloads you plan to run. "},{"title":"Installing Rancher Desktop on macOS​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-rancher-desktop-on-macos","content":"Go to the releases page on GitHub.Find the version of Rancher Desktop you want to download.Expand the Assets section and download Rancher.Desktop-X.Y.Z.dmg, where X.Y.Z is the version of Rancher Desktop.Navigate to the directory where you downloaded the installer to and run the installer. This will usually be the Downloads folder.Double-click the DMG file.In the Finder window that opens, drag the Rancher Desktop icon to the Applications folder.Navigate to the Applications folder and double-click the Rancher Desktop to launch it. After Rancher Desktop is installed, users will have access to these supporting utilities: Helmkubectlnerdctldocker (moby) "},{"title":"Uninstalling Rancher Desktop on macOS​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-rancher-desktop-on-macos","content":"Open Finder &gt; Applications.Find Rancher Desktop.Select it and choose File &gt; Move to Trash.To delete the app, Finder &gt; Empty Trash. "},{"title":"Windows​","type":1,"pageTitle":"Installation","url":"getting-started/installation#windows","content":""},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"getting-started/installation#requirements-1","content":"Rancher Desktop requires the following on Windows: Windows 10 build 1909 or higher. The Home edition is supported.Running on a machine with virtualization capabilities.Persistent internet connection. Rancher Desktop requires Windows Subsystem for Linux on Windows; this will automatically be installed as part of the Rancher Desktop setup. Manually downloading a distribution is not necessary. It is also recommended to have: 8 GB of memory4 CPU Additional resources may be required depending on the workloads you plan to run. "},{"title":"Installing Rancher Desktop on Windows​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-rancher-desktop-on-windows","content":"Go to the releases page on GitHub.Find the version of Rancher Desktop you want to download.Expand the Assets section and download the Windows installer. It will be called Rancher.Desktop.Setup.X.Y.Z.exe, where X.Y.Z is the version of Rancher Desktop.Navigate to the directory where you downloaded the installer to and run the installer. This will usually be the Downloads folder.Review the License Agreement and click I Agree to proceed with the installation.When the installation completes, click Finish to close the installation wizard. "},{"title":"Uninstalling Rancher Desktop on Windows​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-rancher-desktop-on-windows","content":"From the taskbar, click the Start menu.Go to Settings &gt; Apps &gt; Apps &amp; features.Find and select the Rancher Desktop entry.Click Uninstall and click it again when the confirmation appears.Follow the prompts on the Rancher Desktop uninstaller to proceed.Click Finish when complete. "},{"title":"Linux​","type":1,"pageTitle":"Installation","url":"getting-started/installation#linux","content":""},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"getting-started/installation#requirements-2","content":"Rancher Desktop requires the following on Linux: A distribution that can install .deb or .rpm packages, or AppImages.A persistent internet connection.An x86_64 processor with either AMD-V or VT-x.Read-write access on /dev/kvm. See below for details. It is also recommended to have: 8 GB of memory4 CPU Additional resources may be required depending on the workloads you plan to run. "},{"title":"Ensuring You Have Access to /dev/kvm​","type":1,"pageTitle":"Installation","url":"getting-started/installation#ensuring-you-have-access-to-devkvm","content":"On some distributions (Ubuntu 18.04 for example) the user has insufficient privileges to use /dev/kvm, which is required for Rancher Desktop. To check whether you have the required privileges, do: [ -r /dev/kvm ] &amp;&amp; [ -w /dev/kvm ] || echo 'insufficient privileges' Copy If it outputs insufficient privileges, you need to add your user to thekvm group. You can do this with: adduser &quot;$USER&quot; kvm Copy Then reboot in order to make these changes take effect. "},{"title":"Installation via .deb Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installation-via-deb-package","content":"Add the Rancher Desktop repository and install Rancher Desktop with: curl -s https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/Release.key | gpg --dearmor | sudo dd status=none of=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg echo 'deb [signed-by=/usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg] https://download.opensuse.org/repositories/isv:/Rancher:/stable/deb/ ./' | sudo dd status=none of=/etc/apt/sources.list.d/isv-rancher-stable.list sudo apt update sudo apt install rancher-desktop Copy "},{"title":"Uninstalling .deb Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-deb-package","content":"You can remove the package, repository, and key with: sudo apt remove --autoremove rancher-desktop sudo rm /etc/apt/sources.list.d/isv-rancher-stable.list sudo rm /usr/share/keyrings/isv-rancher-stable-archive-keyring.gpg sudo apt update Copy "},{"title":"Installing via .rpm Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-via-rpm-package","content":"Note: RHEL, Fedora, and related distributions package QEMU, which Rancher Desktop uses on Linux, differently than other distributions. To use Rancher Desktop on these distributions, please use the AppImage. To add the repository and install on openSUSE: sudo zypper addrepo https://download.opensuse.org/repositories/isv:/Rancher:/stable/rpm/isv:Rancher:stable.repo sudo zypper install rancher-desktop Copy "},{"title":"Uninstalling .rpm Package​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-rpm-package","content":"Ensure that Rancher Desktop has exited (if not, it should appear in the dock) and do: sudo zypper remove --clean-deps rancher-desktop sudo zypper removerepo isv_Rancher_stable Copy "},{"title":"Installing via AppImage​","type":1,"pageTitle":"Installation","url":"getting-started/installation#installing-via-appimage","content":"You may download the AppImage here. In order to run it, simply make it executable and execute it. For better integration with your desktop, you may use AppImageLauncher. "},{"title":"Uninstalling AppImage​","type":1,"pageTitle":"Installation","url":"getting-started/installation#uninstalling-appimage","content":"Simply delete the AppImage. That's it! "},{"title":"Create a Multi-Node Cluster with k3d","type":0,"sectionRef":"#","url":"how-to-guides/create-multi-node-cluster","content":"","keywords":""},{"title":"Steps to spin up a multi-node cluster​","type":1,"pageTitle":"Create a Multi-Node Cluster with k3d","url":"how-to-guides/create-multi-node-cluster#steps-to-spin-up-a-multi-node-cluster","content":"Make sure dockerd(moby) is selected as the Container Runtime in the Kubernetes Settings page. Install k3d. wgetcurl wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash Copy Run k3d cluster create command to spin up multi node clusters. For example: k3d cluster create two-node-cluster --agents 2 k3d cluster create three-node-cluster --agents 3 Copy k3d sets the newly created cluster as active. You can switch between clusters via kubectl config use-context command. For example: kubectl config use-context k3d-two-node-cluster Copy To learn more about k3s and k3d, refer to these projects' docs at k3s docs and k3d docs. ⚠️ Please note that the clusters created by k3d are not managed by Rancher Desktop GUI. "},{"title":"Hello World Example","type":0,"sectionRef":"#","url":"how-to-guides/hello-world-example","content":"","keywords":""},{"title":"Example#1 - Build Image & Run Container​","type":1,"pageTitle":"Hello World Example","url":"how-to-guides/hello-world-example#example1---build-image--run-container","content":"Create a folder​ mkdir ../hello-world cd ../hello-world Copy Create a Dockerfile with the command below​ FROM alpine CMD [&quot;echo&quot;, &quot;Hello World!!&quot;] Copy Build and run the image for verification purposes​ nerdctldocker nerdctl build --tag helloworld:v1.0 . nerdctl images | grep helloworld nerdctl run --rm helloworld:v1.0 # Remove the image nerdctl rmi helloworld:v1.0 Copy "},{"title":"Example#2 - Build Image & Deploy Container to Kubernetes​","type":1,"pageTitle":"Hello World Example","url":"how-to-guides/hello-world-example#example2---build-image--deploy-container-to-kubernetes","content":"Make sure that you switch the Container Runtime setting in the Kubernetes Settings panel to either dockerd or containerd as needed. Create a folder and add a sample index.html file as follows​ mkdir ../nginx cd ../nginx echo &quot;&lt;h1&gt;Hello World from NGINX!!&lt;/h1&gt;&quot; &gt; index.html Copy Create a Dockerfile with the command below​ FROM nginx:alpine COPY . /usr/share/nginx/html Copy Build image from code locally​ ⚠️ Note: Please note that you need to pass the flag --namespace k8s.io to the nerdctl build command, so that nerdctl builds the image and then makes it available in the k8s.io namespace. nerdctldocker nerdctl --namespace k8s.io build --tag nginx-helloworld:latest . nerdctl --namespace k8s.io images | grep nginx-helloworld Copy Deploy to Kubernetes​ Run below command to create and run a pod using the image built in the previous step. ⚠️ Note: Please note that you need to pass the flag --image-pull-policy=Never to use a local image with :latest tag, as :latest tag will always try to pull the images from a remote repository. kubectl run hello-world --image=nginx-helloworld:latest --image-pull-policy=Never --port=80 kubectl port-forward pods/hello-world 8080:80 Copy Point your web browser to localhost:8080, and you will see the message Hello World from NGINX!!. If you prefer to stay on the command line, use curl localhost:8080. Delete the pod and the image​ nerdctldocker kubectl delete pod hello-world # Remove the image nerdctl --namespace k8s.io rmi nginx-helloworld:latest Copy "},{"title":"Rancher on Rancher Desktop","type":0,"sectionRef":"#","url":"how-to-guides/rancher-on-rancher-desktop","content":"Rancher on Rancher Desktop While Rancher and Rancher Desktop share the Rancher name, they do different things. Rancher Desktop is not Rancher on the Desktop. Rancher is a powerful solution to manage Kubernetes clusters. Rancher Desktop runs local Kubernetes and a container management platform. The two solutions complement each other. For example, you can install Rancher as a workload in Rancher Desktop. This guide outlines steps to install Rancher Dashboard on Rancher Desktop using container runtime or helm (local environment): nerdctldockerhelm nerdctl run --privileged -d --restart=no -p 8080:80 -p 8443:443 rancher/rancher Copy The installation takes a few minutes to complete. After the installation, you can access the Rancher UI as follows: Installed through container runtime: https://localhost:8443/ Installed through helm https://rancher.rd.localhost/ nerdctldocker In order to access the Rancher UI, you need to get the Bootstrap Password: 1: Get Rancher UI container ID/Name: nerdctl ps Copy 2: Get the Bootstrap Password: nerdctl logs [rancherContainerID] 2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot; Copy 3: Bootstrap Password example: [INFO] Bootstrap Password: 7fwjjw4ldcmnq8ghns22q7nhl5lrznwwt9p9vjljfjc6tqbcvhxmwq Copy Follow the wizard instructions and click on Continue to land on the main Rancher UI page. From the Rancher UI, you can manage your local cluster, node, and more. For more information, see Rancher Docs.","keywords":""},{"title":"Setup NGINX Ingress Controller","type":0,"sectionRef":"#","url":"how-to-guides/setup-NGINX-Ingress-Controller","content":"","keywords":""},{"title":"Steps​","type":1,"pageTitle":"Setup NGINX Ingress Controller","url":"how-to-guides/setup-NGINX-Ingress-Controller#steps","content":"Uncheck Enable Traefik from the Kubernetes Settings page to disable Traefik. You may need to exit and restart Rancher Desktop for the change to take effect. Deploy the NGINX ingress controller via helm or kubectl. helmkubectl helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace Copy Wait for the ingress pods to come up and running. kubectl get pods --namespace=ingress-nginx Copy Create a sample deployment and the associated service. kubectl create deployment demo --image=nginx --port=80 kubectl expose deployment demo Copy Create an ingress resource. The following command uses a host that maps to localhost. kubectl create ingress demo-localhost --class=nginx --rule=&quot;demo.localdev.me/*=demo:80&quot; Copy Forward a local port to the ingress controller. kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8080:80 Copy If you access http://demo.localdev.me:8080/, you should see NGINX Welcome page. "},{"title":"Skaffold and Rancher Desktop","type":0,"sectionRef":"#","url":"how-to-guides/skaffold-and-rancher-desktop","content":"Skaffold and Rancher Desktop Skaffold is a command line tool that facilitates continuous development for Kubernetes-native applications. Skaffold handles the workflow for building, pushing, and deploying your application, and it provides building blocks for creating CI/CD pipelines. This enables you to focus on iterating on your application locally while Skaffold continuously deploys to your local or remote Kubernetes cluster. To learn more about Skaffold, refer to the project docs here. In order to demonstrate the steps to set up Skaffold with Rancher Desktop, a sample nodejs app example is provided within the Rancher Desktop docs repository here. Important: Skaffold only works with dockerd (Moby). Therefore, make sure to select your runtime as dockerd from the Kubernetes Settings panel in the Rancher Desktop UI. Visit https://skaffold.dev/docs/install/ to install Skaffold. Clone the Rancher Desktop docs repository and navigate to the express-sample in a terminal as follows: cd docs.rancherdesktop.io/assets/express-sample Copy Run skaffold init. Per the Skaffold docs,skaffold init walks through your project directory and looks for any build configuration files such as Dockerfile, build.gradle/pom.xml, package.json, requirements.txt, or go.mod. We will select Dockerfile and package.json in our example. This will generate the initial configuration file that you can modify as needed. When prompted, select yes to write your config to skaffold.yaml. In your editor, review your app.js and manifests.yaml files. Note that in manifests.yaml, you will have a deployment config as well as a service config. It is only necessary to have 1 replica for testing purposes. Back in your terminal, you'll notice that you will have two options: skaffold run that lets you build and deploy, and skaffold dev that allows you to enter development mode with auto-redeploy. We will use skaffold dev in this example. As you will need to have push access to the image repository, you can either use your docker login, or you can set up a local registry: Docker HubLocal Registry Before running skaffold dev, use your docker login if you have a Docker Hub account. As you go through your development, Skaffold will detect any changes and will automatically go through the build and deployment process again. You will be able to see any changes reflected in the cluster. Point your web browser to localhost:3000, and you will see the express-sample screen.","keywords":""},{"title":"Debugging a Container App with VS Code Docker extension","type":0,"sectionRef":"#","url":"how-to-guides/vs-code-docker","content":"","keywords":""},{"title":"Steps to debug a sample application running within a container​","type":1,"pageTitle":"Debugging a Container App with VS Code Docker extension","url":"how-to-guides/vs-code-docker#steps-to-debug-a-sample-application-running-within-a-container","content":"Install and launch Rancher Desktop. Select dockerd (moby) as the Container Runtime from the Kubernetes Settings menu.  Install and launch Visual Studio Code or Visual Studio Code Insiders. This tutorial uses Visual Studio Code.  Install the VS Code Docker extension from the marketplace.   You can use the samples provided at this Github repository, https://github.com/bwateratmsft/samples. Clone this repository and open expressapp folder in your VS Code session. Open the command palette (Ctrl+Shift+P, F1, or Cmd+Shift+P) and run &quot;Add Docker Files to Workspace&quot;. Since this is an Express app, Select Node.js as the Application Platform and 3000 (or any other available port) as the port. As it's a simple example, select No for the Include optional Docker Compose files prompt. This step adds a Dockerfile and Launch Configuration required to debug the application.  Insert a breakpoint in the code.  In the Debug window at the top, switch the active debug configuration to &quot;Docker Node.js Launch&quot;. Press F5 to start the application container in Debug mode. You will see the sample application's landing page opening in your browser, and the code execution stopping at the breakpoint. From here, you can debug the application as if it's running on your host.   Sometimes, the application might not break at the set breakpoint on the first run as the debugging process may not have started. In this case, refresh the browser to trigger the execution again to hit the breakpoint. You can also get around this behavior by setting the property inspectMode: 'break' in task.json file to prevent the app from running until the debugger attaches. On some machines, the firewall settings might prevent the debugging process from establishing a connection between the host and the container processes. In this case, you can add a firewall rule to allow communication between the VM where the container is running and the host where you have the VS Code session running. On Windows, you can add a firewall rule by running the below command from a privileged powershell: New-NetFirewallRule -Action Allow -Description 'Allow communication from WSL containers' -Direction Inbound -Enabled True -InterfaceAlias 'vEthernet (WSL)' -Name 'WSL Inbound' -DisplayName 'WSL Inbound' Copy "},{"title":"VS Code Remote Containers","type":0,"sectionRef":"#","url":"how-to-guides/vs-code-remote-containers","content":"","keywords":""},{"title":"Steps to try a sample dev container​","type":1,"pageTitle":"VS Code Remote Containers","url":"how-to-guides/vs-code-remote-containers#steps-to-try-a-sample-dev-container","content":"Install and launch Rancher Desktop. Select dockerd (moby) as the Container Runtime from the Kubernetes Settings menu.  Install and launch Visual Studio Code or Visual Studio Code Insiders. This tutorial uses Visual Studio Code.  Install the Remote Development extension pack.   After the extension is installed, you will see the extention item in the side bar, and a green button at the lower left corner to show the command palette with various options/commands related to Remote Development.  Microsoft provides a number of sample dev containers at this GitHub repository: https://github.com/microsoft/vscode-dev-containers.git. Clone this repository to your local machine. git clone https://github.com/microsoft/vscode-dev-containers.git Copy Click on the button at the lower left corner of the window and select Open Folder in Container... from the command palette. Browse to one of the samples in the cloned respository, e.g., javascript-node.   On selecting a sample, you will see the progress notification while the container is being loaded, and once the container is successfully started, the bottom left corner shows the container name. Once the container is started, Press F5 in the VS Code IDE to start the sample application. You will see that the application is started and served on localhost:3000.  Congratulations! You have successfully loaded and run a sample dev container using Rancher Desktop and VS Code. "},{"title":"Next steps​","type":1,"pageTitle":"VS Code Remote Containers","url":"how-to-guides/vs-code-remote-containers#next-steps","content":"Microsoft has provided extensive documentation about using dev containers in various scenarios here. Please refer to the following tutorials to try a use case that's relevant to your needs. Happy Containerizing with Rancher Desktop! "},{"title":"Architecture","type":0,"sectionRef":"#","url":"references/architecture","content":"Architecture Rancher Desktop is an electron-based application that wraps other tools while it also provides the user experience to create a simple experience. On macOS and Linux, Rancher Desktop leverages a virtual machine to run containerd or dockerd and Kubernetes. Windows Subsystem for Linux v2 is leveraged for Windows systems. All you need to do is download and run the application.","keywords":""},{"title":"rdctl Command Reference","type":0,"sectionRef":"#","url":"references/rdctl-command-reference","content":"","keywords":""},{"title":"rdctl or rdctl help​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-or-rdctl-help","content":"Run rdctl or rdctl help to see the list of available commands. &gt; rdctl help The eventual goal of this CLI is to enable any UI-based operation to be done from the command-line as well. Usage: rdctl [command] Available Commands: completion Generate the autocompletion script for the specified shell help Help about any command list-settings Lists the current settings. set Update selected fields in the Rancher Desktop UI and restart the backend. shutdown Shuts down the running Rancher Desktop application version Shows the CLI version. Flags: --config-path string config file (default C:\\Users\\GunasekharMatamalam\\AppData\\Roaming\\rancher-desktop\\rd-engine.json) -h, --help help for rdctl --host string default is localhost; most useful for WSL --password string overrides the password setting in the config file --port string overrides the port setting in the config file --user string overrides the user setting in the config file Use &quot;rdctl [command] --help&quot; for more information about a command. Copy "},{"title":"rdctl version​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-version","content":"Run rdctl version to see the current rdctl CLI version. &gt; rdctl version rdctl client version: 1.0.0, targeting server version: v0 Copy "},{"title":"rdctl list-settings​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-list-settings","content":"Run rdctl list-settings to see the current active configuration. &gt; rdctl list-settings { &quot;version&quot;: 4, &quot;kubernetes&quot;: { &quot;version&quot;: &quot;1.22.7&quot;, &quot;memoryInGB&quot;: 2, &quot;numberCPUs&quot;: 2, &quot;port&quot;: 6443, &quot;containerEngine&quot;: &quot;moby&quot;, &quot;checkForExistingKimBuilder&quot;: false, &quot;enabled&quot;: true, &quot;WSLIntegrations&quot;: {}, &quot;options&quot;: { &quot;traefik&quot;: true } }, &quot;portForwarding&quot;: { &quot;includeKubernetesServices&quot;: false }, &quot;images&quot;: { &quot;showAll&quot;: true, &quot;namespace&quot;: &quot;k8s.io&quot; }, &quot;telemetry&quot;: true, &quot;updater&quot;: true, &quot;debug&quot;: false } Copy "},{"title":"rdctl set​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-set","content":"Run rdctl set [flags] to set properties. In most of the cases, Kubernetes would be reset on running the set command. You can set multiple properties by chaining in a single command. See some examples below. &gt; rdctl set --kubernetes-enabled=false &gt; rdctl set --container-engine docker --kubernetes-version 1.21.2 Copy "},{"title":"rdctl shutdown​","type":1,"pageTitle":"rdctl Command Reference","url":"references/rdctl-command-reference#rdctl-shutdown","content":"Run rdctl shutdown to gracefully shutdown Rancher Desktop. &gt; rdctl shutdown Shutting down. Copy "},{"title":"Working with Containers","type":0,"sectionRef":"#","url":"tutorials/working-with-containers","content":"","keywords":""},{"title":"Running Containers​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#running-containers","content":"To run a container with the default bridge CNI network (10.4.0.0/24): nerdctldocker nerdctl run -it --rm alpine Copy To build an image using BuildKit: nerdctldocker nerdctl build -t foo /some-dockerfile-directory nerdctl run -it --rm foo Copy To build and send output to a local directory using BuiltKit: nerdctldocker nerdctl build -o type=local,dest=. /some-dockerfile-directory Copy "},{"title":"Docker Compose​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#docker-compose","content":"Docker Compose is a tool for defining and running multi-container Docker applications. nerdctldocker The nerdctl-compose CLI is designed to be compatible with docker-compose: nerdctl compose up -d nerdctl compose down Copy "},{"title":"Exposing a Port​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#exposing-a-port","content":"To expose port 8000 for a container: nerdctldocker nerdctl run -d -p 8000:80 nginx Copy You can then access the container via the browser here: http://localhost:8080/. nerdctldocker nerdctl build -t demo:latest /code/demos/rd/anvil-app Copy "},{"title":"Targeting a Kubernetes Namespace​","type":1,"pageTitle":"Working with Containers","url":"tutorials/working-with-containers#targeting-a-kubernetes-namespace","content":"You may also target a Kubernetes namespace with the --namespace parameter with containerd. Please note that docker doesn't use namespaces. nerdctl nerdctl --namespace k8s.io build -t demo:latest /code/demos/rd/anvil-app nerdctl --namespace k8s.io ps Copy "},{"title":"Working with Images","type":0,"sectionRef":"#","url":"tutorials/working-with-images","content":"","keywords":""},{"title":"General Usage​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#general-usage","content":"Using either tool requires Rancher Desktop to be running with the appropriate container runtime. For nerdctl, use the containerd runtime. For docker, use the Moby runtime. You can learn about all of the command options and display the help documentation by running: nerdctldocker nerdctl -h Copy The initial set of images are stored in the same containerd that Kubernetes uses, and are part of the k8s.io namespace. You can also switch to a namespace calleddefault if you wish to build or pull images into a different namespace. Currently the only way to create other namespaces is to build or pull an image with thenerdctl CLI, using the --namespace &lt;NAMESPACE_NAME&gt; option. "},{"title":"Listing Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#listing-images","content":"To see the images currently available, run the following command: nerdctldocker nerdctl images Copy "},{"title":"Building Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#building-images","content":"nerdctldocker Building images has a similar feel to existing tools. For example, consider running nerdctl from a directory with a Dockerfile where the Dockerfile is using a scratch image. nerdctl build . [+] Building 0.1s (4/4) FINISHED =&gt; [internal] load build definition from Dockerfile =&gt; =&gt; transferring dockerfile: 31B =&gt; [internal] load .dockerignore =&gt; =&gt; transferring context: 2B =&gt; [internal] load build context =&gt; =&gt; transferring context: 33B =&gt; CACHED [1/1] ADD anvil-app / Copy nerdctl has options for tagging at the same time as building and other options you've come to expect. nerdctl build -t TAG . Copy "},{"title":"Building Local Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#building-local-images","content":"In order to demonstrate the steps to build local images and run apps, a sample nodejs app is provided within the Rancher Desktop docs repository. To get started, clone the repository and cd into assets/express-sample in a terminal. Run the following command to build image from Dockerfile: nerdctldocker nerdctl --namespace k8s.io build -t expressapp:v1.0 . Copy Run the following command to run container: kubectl run --image expressapp:v1.0 expressapp kubectl port-forward pods/expressapp 3000:3000 Copy Note: When adding the latest tag, be sure to also specify the following: imagePullPolicy: Never Copy "},{"title":"Tagging Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#tagging-images","content":"If you want to tag an existing image you've built you can use the following command: nerdctldocker nerdctl tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] Copy "},{"title":"Removing Images​","type":1,"pageTitle":"Working with Images","url":"tutorials/working-with-images#removing-images","content":"To remove an image, run the following command: nerdctldocker nerdctl rmi IMAGE Copy "}]